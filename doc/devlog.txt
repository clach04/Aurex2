-*-outline-*-

$Id: devlog.txt,v 1.45 2006/02/20 13:58:05 fumi Exp $

*********** 開発メモ *************

* ANSI C で定義されている関数は埋め込む。他は追い出す。

→変更
# opendir が使いたいが故に、
Unix 標準であるようなものはOK。

* onHand 対応
onHand 特有の関数の場合はコメントに onHand と入れる。

* Rupsys で定義されている一部の関数

native code にする。つまり、自分で書く。
以下はその関数（というかシステムコール）の候補
** aprMenu
** softkey
** disp系全部

* リソース節約
 できるだけCPUやメモリ（その他）を消費しないようにする。

* int の大きさ

4 byte あると仮定してはいけない。
2 byte でもいいときだけ、int を使用。
4 byte 必要と思ったら、long を使え

* pixel
最上位 1 bit が現在の色 (1: 黒  0 :白)
ある一定毎に*算術*右シフトを行なう。
→
ウソ。算術でなく、論理シフトを使用する。

* 画面まわり

ピクセル毎に、
 （現在の色：ブリンク（状態：色）：リバース）
の状態を持たせる。
 そして、履歴バッファに追加する。
→うそ。
現在の色：表示すべき色：履歴
の3つが必要
表示すべき色は：履歴の最上位の1ビットで可能なので実質
現在の色：履歴
だけだな。


* クラス構造
Ruputer を継承したクラスはグローバル変数で唯一持つようにする。
→やめ。static 関数で自分のインスタンスを得るように変更
→元に戻る

* オプション
毎回、真偽値を判断するのではなく、できれば多相性を利用してクラスを分けたい訳です。


* タイマ割り込みルーチン

この割り込みのルーチンと、メインのルーチンを数で、64Hz のクロックを割る。
割り込みルーチンが終わらない場合つぎつぎに増えていくことになる。
→
微妙。同じ割り込みは割り込みルーチン時には入らないはず（mn10200 資料より）である。
だが、タイマルーチンは、割り込みルーチンから呼び出されて実行されるので、並列に実行される？
# 特に、「並列」という言葉は Ruputer のマニュアルにも出てくるので、微妙だったりする。

2004-1-26(Mon)追記
「タイマ割込は『前回』のタイマ割込ルーチンが動いていようが実行される」
と思っていたが、違うか……？
まー無理の予感



* SD vs CM
システムごとに継承してもらう必要があるクラスはプレフィクスに SD を付ける
ただし今のところ、Ruputer は例外にしている。
CM は継承しないで使うもの

* タイマ登録
その時のスレッドの「情報」をテーブルに書いておく、そしてタイマが生起された時に、その情報をコピーして使う。
基本的には書くのは、メインスレッドなので、サブスレッド（？）はその情報を使い回せるっ……

* ロードアドレス vs PC
ロードアドレスが、0x110100 だった場合、
PC-0x110100+0x10 が file offset


* define

** KEY_WITHOUT_PUSH_UP
キー離れたということが認識できないシステムかどうか。
ただし、同時押し不可。


** HOST_IS_LITTLE_ENDIAN
今のところ、未定義でコレ。

** HOST_IS_BIG_ENDIAN
実装したが試験する環境すらないため動くのか不明
→ 実装できていません。

** FAIL_NOT_ALIGNED_ADDRESS
アライメントされていないアドレスからの複数バイト読み出しに失敗するときに定義
# まるで MN10200 やね。

** CYCLE_IS_SLICED
定義されると、スレッドに対し「実行するだけのサイクル数が与えられる」
64Hz 分のサイクル数を全スレッドで分け合う形

未定義では、スレッドの頭から 64Hz 全てのサイクルを渡し実行させる。
余ったサイクルで次のスレッドという形。優先順位は常にタイマのルーチンが強い（後に実行するものが常に優先）。そのためメインスレッドは実行されない可能性がある。
# まー結構多くのメインスレッドは「キー待ち」しかしてなかったりする？

** DEBUG
debug 用の表示を標準エラー出力に吐く

** CPU_DEBUG
CPU の一命令毎に、実行する命令、レジスタを表示する

** MEMORY_DEBUG
メモリアクセスの実効アドレスを表示する

** NO_SKIP
フレームスキップをしない

* オプション

** 現状の aurex にあるものは以下

*** warn_odd_access
*** lcd_102x64
*** lcd_rectangle
*** lcd_bairitu
*** enable_sound
*** enable_cpu_timer
*** enable_rom_font
*** enable_status_bar
*** disable_menu
*** cpu_speed
*** 64hz_speed
*** enable_gray
*** always_top
*** shell_icon
*** no_caption
*** log
*** xpos
*** ypos
*** fixed_font_name
*** prop_font_name
*** root_directory

** option はグローバル変数にして参照させる。
アクセサで触る。
ただし、get/set のprefix無し。オーバロードでget/setにする（悪い実装かな？）
# これは、option->getHogehogeo() より、option->hogehoge() の方が分かりやすいかなと
# おもったから
→変更
get は無し。set は付ける

** 共通部で実現
*** warn_odd_access
実装済み
*** enable_sound
*** enable_cpu_timer
*** enable_rom_font
*** cpu_speed
*** 64hz_speed
*** enable_gray
グレイのみ
*** log
*** root_directory
実装済み

** おのおのの実装で実現
*** lcd_102x64
*** lcd_rectangle
*** lcd_bairitu
*** enable_status_bar
*** disable_menu
*** always_top
*** shell_icon
*** no_caption
*** xpos
*** ypos
*** fixed_font_name
*** prop_font_name
*** 半透明

* native code
/*
 * Native call 呼び出し時のスタック
 *
 * a[3]-> pc
 *        kernel stack base address （常に同じ値）
 *        arg...
 *
 */

native code のコードでは a3 に kernel stack base address を代入した後、native code を実行する。
ただし、こうしてしまうと native code のネスティングができないため、

*(kernel stack base address) に 4 byte の netsting level を保持する。この
値が 0 のときのみ、a3 に kernel stack base address の値を読み込む。

そして、実行前には、nesting level に 1 を足す。
当然、脱出時には、nesting level を 1 引く。

** kernel stack 側



     -> native_in retu address
     -> previous sp
     -> native_in retuan address -> previous sp
     -> pc
     -> kernelstack
     -> arg

native_in 終了後
（――カーネルスタック――）

a3     -> kernel stack base address
       -> previous sp （native_in 呼び出し前の a3 （※））
SPbase -> netsting level


（――ユーザスタック――）
          kernel stack base address
（※） -> previous (to call native code) pc (4byte)
	  using panax (4byte)
          args

convtoppip からの jsr はスタックに PC 積まない。

native_out 終了後

* ディレクトリ関連


ruputer → host
host → ruputer

どちらの変換も「同様」に考える。

ホスト側の仮想ルートディレクトリ
c:\hoge\hage
とする。

** ruputer → host
b:\system\ini\foo.ini
をhost側のディレクトリに変換する。
(1) Ruputer側の『変換部』は b: 
(2) 『変換先』は仮想ルートディレクトリ(つまり、c:\hoge\hage)
ということで、
c:\hoge\hage\system\ini\foo.ini
ということになる。

** host → ruputer
c:\hoge\hage\bar.exf
(1) 『変換部』は仮想ルートディレクトリの, c:\hoge\hage
(2) 『変換先』は b:\

ということで、
b:\bar.exf
になる。

** まとめ
フルパスで来た場合には簡単にできるが、相対パスだった場合とか色々考慮が必要。



* 仮想ルートディレクトリの関係

** 読み込むファイルが仮想ディレクトリ以下だった場合

エミュレートしているプログラムからは、そのプログラムのディレクトリをカ
レントディレクトリとしてみなす。

** 上記以外（読み込むファイルが仮想ディレクトリ以下でない）
b:\ をカレントディレクトリとする。


* 仮想ルートディレクトリ未定義の場合
変換エラーになるので、ファイル入出力不可（だっけか。）はもとより。

Ruputer→ローカル ：（各種 psdos システムコールで使用）
常に失敗。
→なぜか？
  ローカル用に相対パスでは変換できる（b:\ を除くだけ）。ただ、これをやってしまうと、変なファイルが使用される、また、作成されるのが嫌だから。

ローカル→Ruputer ：（findfile系  起動ファイル名）
 path が絶対→失敗
 path が相対→失敗
成功。b:以下に付け足される


* 懸案

** フォントのレンダリング
ncurses のようなフォントのレンダリングの機能が無いウィジェットの場合、
gv_kput では表示ができない。この場合どうすればよいか？


・ freetype などのレンダリングエンジンを使う(freetype がそういうものかどうか知らない)
・ BDFをレンダリングして、実行ファイルに読み込む。ないしは実行時に読み込む


** 日本語ファイル名／ディレクトリ名
Unix の場合ほとんどが EUC だが、Ruputer は SJIS でファイル名がもらえる。
プログラムが日本語ファイルを作成した場合、ターミナルからはバイト列とし
か見えなくなる。

・そのまま作る
・EUCに変換する


* dos_open
ウィークリーアラームのルーチンでは、/sysytem/weekly.ini だかの存在チェックをしていない。

* 制限
** 外字
外字が出力できるのは、gv_sput を用いたときのみ


* メインループまでのシーケンス (obsolete)
(1) Ruputer クラスのインスタンス化。（widget 専用のオプションの設定）
(2) オプションロード（Ruputer のメソッド）
(3) filerini 初期化（Ruputer のメソッド）
(4) オプションを使用しているものの初期化
(5) widget の初期化
(6) ロード


** →2004-4-29(Thu)追加
うそかも。少なくとも、実行時にオプションの変更ができる（windowsだけ？）ものは、(3) のロードの処理とオプションの更新の処理が同様の流れで処理できるので、↓こういう風の方がいいかも。
(1) Ruputer クラスのインスタンス化。（widget 専用のオプションの設定）
(2) widget の初期化
(3) オプションロード（Ruputer のメソッド）
(4) filerini 初期化（Ruputer のメソッド）
(5) オプションを使用しているものの初期化
(6) ロード


* 各クラスが管理すべきリソースについて（2004-10-26(Tue) 追記）
** Ruputer クラス
ここで管理すべきは、
 システムで『ただひとつ』なもの
 メモリ
 ステートフルなシステムコールの状況
   具体的には、
     カレントディレクトリ
     DTA
     タイマ（何本使っているか、空きはあるのか等）
 PSP の値
 ロードアドレス
 key
 LCD
 割り込み

** Thread クラス
 CPU のレジスタ値
  → 退避するよりも Thread クラスに持たせた方が簡単


* 内部の話
** 画面に出力まで

gv_kput()
↓
cmlcd->drawString() 等の
メソッドによって、cmlcd 内のピクセルを保持するバッファに描かれる
↓
sdlcd->updateWindow() により実際の画面に描かれる

** キー入力

キー入力は Ruputer クラスでハンドリングする。
keybuffer->enQueueKey でキーバッファにキューイングする。

とりだしは keybuffer->emu_bi_getbtn 等で取得する


* State について
** Thread の State
enum で STATE
 RuputerState, ThreadState 

** RuputerState
 RUNNING
 STOP
 ENDING_RELOAD
 ENDING_NEW_LOAD
 ENDING_DESTORY

ENDING... は何回か連続であった場合、（メインスレッドを削除（←これは各自で判断すべき））して RELOAD, NEW_LOAD, DESTROY を行なう。


** ThreadState
 Running
  ....

 DOS_EXIT

** dos_exit
 Ruputerのメソッドを呼び出してメインスレッドを削除させる。
 → メインスレッドだと自分のインスタンスが無くなるので、
      thread->isMainThread()
    を呼び出して検証する。自分がメインスレッドなら自スレッドのstateのみ修正（←これはどれでも行なう。）。

 スレッドループ中ではメインスレッドも検証する。
 （cpuループはいいですが）


* CPU サイクルの正確な算出

MN10200 と Ruputer の特徴をまとめると以下のようになる。
MN10200 は 3 段のパイプライン
フェッチ・デコード・実行を行なう。

** 1命令だけを考える
フェッチは命令フェッチ命令長の大きさによる。
PC が内蔵SRAMではない場合、1byte につき 2 cycle 必要。
SRAM であれば、1 cycle/2byte

デコードは1 cycle ？

実行はドキュメントに書かれているもの
（mov 命令であれば、 + バイトアクセス分のサイクル数*（4-1））

** パイプライン
毎回これがパイプラインとして実行される。
すると、実行が add だったりすれば、次の命令はその時と同時に読み込める。

……むずいっす。

2006-1-22(Sun)追記
とりあえず、フェッチ・デコードのサイクル数（オペコード・ディスプレースメントの読み込みのサイクル数）は無視して、実行時のサイクルだけ考慮するようにする。


* 拡大

** どこで拡大を行なうか？

gv_*** を呼ばれた時点では、
  # 0 <= x < 320, 0 <= y < 240
というのが前提。
よって、共通描画ルーチンへの引数も同様の範囲である。
→ cmlcd で吸収

さらに言うなら pset, pget あたりで吸収させたいのだが、それは一部でのみ可能。
なぜならば、描画関数にはドロー系とペイント系に分けられる。
・ドロー系関数
  gv_line
  gv_circle
  gv_square
  gv_kput
（名前いいかげんかも）

・ペイント系関数
  gv_put

ドロー系であれば、直接ピクセル操作を行なう必要があろう。
ペイント系であれば、pset あたりでの操作も可能かもしれない……。

** アンチエイリアシングはできるのか？

問題はペイント系関数で、アンチエイリアスをどのようにするか？
ということにつきる。
→2004-12-11(Sat)追記：とりあえず、行なわない。

* 拡大とそのバリエーション


** 1. 拡大はするが、それは今まで通りの拡大
** 2. 拡大し、ドロー系と文字は直接ピクセルを触る

のふたつしかありえない？
2. の場合であっても、ペイント系関数は 1. と同様のものが使える。が、だが、
使わないのが、コツのような気がしている。

なぜなら、pixel の持ち方による。
1. は常に 320x240 の領域を保持していればよいが、

2. の場合は拡大分の



今ごっちゃになっているのはよくない。

cmlcd ではインターフェースを用意して、下請けの関数に投げる。
オプションや状態を cmlcd で管理させる。



* Todo

Ver. 0.2.0 リリースまでの Todo

** cmlcd の expansion をいじったときに、その後の pixel 値の引き継ぎ
  done

** cpu のマシンサイクルの考慮
** Windows: virtual directory のオプション項目
done

** Windows(他): key config
** Windows: 縦モードの実装（キーとの絡みも）



* 子プロセスについて

子プロセス用の Thread class を作る。
親 Thread へ cycle は渡さない。
で、OK ?


* lcdfreeze

簡単かと思ったが、そうは行かない。

初めは updatePixel() を呼ばなくすればいいと思っていたがそうではなくて、
プレーンをもう一つ用意しないとだめそうだ。

なぜなら、updatePixel() をやめただけでは、残映したままになってしまう。
灰色→黒になっているものも途中で止められてしまう。
# 実機とは違うが、それでいいような気もするが……。

だから、lcdfreeze した時点でのバックグラウンドプレーンを clone しておき
それに対して残映を行なうようにする、かも。



* sound
wbiossound.cpp でオプションの判断を行なう。disable の場合は null を作成
各 widget ではインスタンスの作り替えることは可能（nullも可能）

# Todo: SDSound の open が呼ばれずに execute から値がわたされるので、それを考慮できるようにする。

Todo: async の execute で何noteも実行できないとノイジーだね。
sdsound に、『書けるかどうか？』というのを持たすのが妥当。


* gv_place での残映
CMLCdpix クラス の fgPixelData に秘訣。
これは画面に表示している色を保持しているバッファ。使用方法は下記
 1. 102x64 時：fgPxcelData の左上部分を使用する。piceldata より、その部分を更新する。
 2. 320x240 時：普通に全てのピクセルを更新する

 102x64, 320x240 どちらの領域をアップデートするかは、各widget より与える。




* frame

Ruputer.cpp でのメインループを模式的に書くと以下のようになる。

frame->startFrame();
for(;;)
{
  if(frame->checkTime() == 0)
    continue;

  エミュレート();
  タイマ割り込み();

  if(!frame->isFrameUpdateSkip())
  {
    画面更新();
    frame->endFrameUpdate();
  }
}

この前提は、エミュレート() と タイマ割り込み() が 1/64 (=15.625ms)で終了することが前提。
そうでない場合常に画面更新がスキップされ何も表示されなくなる。
# Zaurus ではそうなる。

回避するためには『フレームスキップ最大数』を定義してもらう。現行の仕様は例えば auto。 2 にすると、2フレーム連続のスキップは許すけど、3フレーム目には強制的に描画させる、とか。
# 0 にするとフレームスキップなしになるように。
Common.Speed.SkipMaxFrame=2


lasttick : 前回実行時の時間(ms)
delay : 本来割り込みの時間から遅れたオフセット（正）、前ノリ（負）


2006-2-15(Wed)
余談追記：qte だと1フレームの描画が 100ms 程度かかる。（最高で 10fps だ）

* cmlcd***

CMLcd : 画面や描画を管理するクラス
CMLcdFunc : 描画ルーチン（残映は管理しない）
            CMLcd に保有。
            下記のどのインスタンスを作るかは option の anti aliases の項目値による。
  - CMLcdFuncDefault : デフォルト（アンチエイリアスなし）
  - CMLcdFuncAA : アンチエイリアスあり描画


CMLcdPix : ピクセル管理クラス
           CMLcdFunc に保有
           下記のどのインスタンスを作るかは option の after image の項目値による。
  - CMLcdPixDefault : 残映あり
  - CMLcdPixDefault_Noai : 残映なし

  - CMLcdPixAA : ピクセルアンチエイリアスあり（←ボツです）
  - CMLcdPixAA :  〃           残映なし（←ボツです）


